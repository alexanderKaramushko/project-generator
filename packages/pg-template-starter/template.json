{
  "react-typescript": {
    "package": {
      "name": "react-typescript-starter",
      "keywords": [
        "react",
        "typescript",
        "project"
      ],
      "description": "Стартовый шаблон проекта на React и Typescript",
      "repository": {
        "type": "git",
        "url": "https://example.com",
        "directory": "src"
      },
      "engines": {
        "node": ">=14"
      },
      "scripts": {
        "start": "pg-template-builder start",
        "build": "pg-template-builder build"
      },
      "dependencies": {
        "react": "18.0.0",
        "react-dom": "18.0.0"
      },
      "devDependencies": {
        "@antfu/eslint-config": "3.13.0",
        "eslint": "9.17.0",
        "@types/jest": "^29.5.12",
        "jest": "29.4.1",
        "ts-jest": "29.0.5",
        "ts-node": "10.9.1",
        "typescript": "^4.4.2"
      }
    },
    "configs": {
      "eslint.config.mjs": [
        "import antfu from '@antfu/eslint-config';",
        "",
        "const OFF = 0;",
        "// eslint-disable-next-line unused-imports/no-unused-vars",
        "const WARNING = 1;",
        "const ERROR = 2;",
        "",
        "const ENABLE = 'always';",
        "const DISABLE = 'never';",
        "",
        "export default antfu(",
        "  {",
        "    typescript: {",
        "      overrides: {",
        "        'ts/no-use-before-define': ERROR,",
        "        'ts/no-shadow': ERROR,",
        "        'ts/no-unused-vars': [",
        "          ERROR,",
        "          {",
        "            args: 'after-used',",
        "            vars: 'all',",
        "            ignoreRestSiblings: false,",
        "          },",
        "        ],",
        "      },",
        "    },",
        "    javascript: {",
        "      overrides: {",
        "        'no-unused-vars': OFF,",
        "        'no-shadow': OFF,",
        "        'implicit-arrow-linebreak': OFF,",
        "        'linebreak-style': OFF,",
        "        'padding-line-between-statements': [",
        "          ERROR,",
        "          {",
        "            blankLine: ENABLE,",
        "            prev: '*',",
        "            next: 'block-like',",
        "          },",
        "          {",
        "            blankLine: ENABLE,",
        "            prev: 'block-like',",
        "            next: '*',",
        "          },",
        "          {",
        "            blankLine: ENABLE,",
        "            prev: ['const', 'let'],",
        "            next: ['block-like', 'expression'],",
        "          },",
        "        ],",
        "        'object-property-newline': ERROR,",
        "        'object-curly-newline': [",
        "          ERROR,",
        "          {",
        "            ObjectPattern: {",
        "              multiline: true,",
        "            },",
        "            ExportDeclaration: {",
        "              multiline: true,",
        "              minProperties: 3,",
        "            },",
        "          },",
        "        ],",
        "        'lines-between-class-members': [",
        "          ERROR,",
        "          ENABLE,",
        "          {",
        "            exceptAfterSingleLine: true,",
        "          },",
        "        ],",
        "        'padded-blocks': [",
        "          ERROR,",
        "          {",
        "            classes: ENABLE,",
        "          },",
        "        ],",
        "        'max-len': [",
        "          ERROR,",
        "          {",
        "            code: 120,",
        "            ignoreStrings: true,",
        "            ignoreTemplateLiterals: true,",
        "            ignoreUrls: true,",
        "          },",
        "        ],",
        "        'no-console': ERROR,",
        "        'no-debugger': ERROR,",
        "        'no-multiple-empty-lines': [",
        "          ERROR,",
        "          {",
        "            max: 1,",
        "            maxBOF: 0,",
        "            maxEOF: 0,",
        "          },",
        "        ],",
        "        'quotes': [ERROR, 'single'],",
        "        'no-restricted-syntax': [OFF, 'TSEnumDeclaration[const=true]'],",
        "      },",
        "    },",
        "    stylistic: {",
        "      indent: 2,",
        "      quotes: 'single',",
        "      semi: true,",
        "    },",
        "  },",
        "  {",
        "    files: ['**/*.ts', '**/*.tsx'],",
        "    rules: {",
        "      'sort-keys': [",
        "        ERROR,",
        "        'asc',",
        "        {",
        "          caseSensitive: true,",
        "          natural: false,",
        "        },",
        "      ],",
        "    },",
        "  },",
        "  {",
        "    rules: {",
        "      'import/prefer-default-export': OFF,",
        "      'import/no-unresolved': OFF,",
        "      'import/extensions': [",
        "        ERROR,",
        "        'ignorePackages',",
        "        {",
        "          '': DISABLE,",
        "          'js': DISABLE,",
        "          'ts': DISABLE,",
        "          'tsx': DISABLE,",
        "        },",
        "      ],",
        "      'perfectionist/sort-imports': [",
        "        ERROR,",
        "        {",
        "          groups: [",
        "            'type',",
        "            ['builtin', 'external'],",
        "            'internal-type',",
        "            'internal',",
        "            ['parent-type', 'sibling-type', 'index-type'],",
        "            ['parent', 'sibling', 'index'],",
        "            'object',",
        "            'unknown',",
        "          ],",
        "        },",
        "      ],",
        "    },",
        "  },",
        ");",
        ""
      ],
      "jest.config.json": {
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js"
        ],
        "moduleNameMapper": {
          "^src\"/(.*)": "<rootDir>/src/$1"
        },
        "testEnvironment": "node",
        "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
        "transform": {
          "^.+\\.(t|j)s\"\\?$": [
            "ts-jest",
            {
              "tsconfig": "tsconfig.test.json"
            }
          ]
        },
        "setupFilesAfterEnv": ["<rootDir>/jest/setup.js"]
      },
      "tsconfig.json": {
        "compilerOptions": {
          "target": "ESNext",
          "module": "ESNext",
          "moduleResolution": "node",
          "baseUrl": ".",
          "paths": {
            "src/*": [
              "./src/*"
            ]
          },
          "types": [
            "jest",
            "node"
          ],
          "resolveJsonModule": true,
          "allowJs": true,
          "sourceMap": false,
          "noEmit": true,
          "allowSyntheticDefaultImports": true,
          "esModuleInterop": true,
          "strict": true,
          "strictFunctionTypes": true,
          "strictNullChecks": true,
          "alwaysStrict": true,
          "noImplicitAny": true,
          "noImplicitReturns": true,
          "noImplicitThis": true,
          "skipLibCheck": true
        },
        "include": [
          "src/**/*"
        ],
        "ts-node": {
          "esm": true,
          "compilerOptions": {
            "module": "nodenext"
          }
        }
      }
    },
    "fileStructure": "pg-template-structure",
    "builder": "esbuild"
  }
}
